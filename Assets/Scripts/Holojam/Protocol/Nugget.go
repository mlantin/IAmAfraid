// automatically generated by the FlatBuffers compiler, do not modify

package Protocol

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Nugget struct {
	_tab flatbuffers.Table
}

func GetRootAsNugget(buf []byte, offset flatbuffers.UOffsetT) *Nugget {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Nugget{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Nugget) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Nugget) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Nugget) Scope() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Nugget) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Nugget) Type() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Nugget) MutateType(n int8) bool {
	return rcv._tab.MutateInt8Slot(8, n)
}

func (rcv *Nugget) Flakes(obj *Flake, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Nugget) FlakesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func NuggetStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func NuggetAddScope(builder *flatbuffers.Builder, scope flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(scope), 0)
}
func NuggetAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(origin), 0)
}
func NuggetAddType(builder *flatbuffers.Builder, type int8) {
	builder.PrependInt8Slot(2, type, 0)
}
func NuggetAddFlakes(builder *flatbuffers.Builder, flakes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(flakes), 0)
}
func NuggetStartFlakesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func NuggetEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
